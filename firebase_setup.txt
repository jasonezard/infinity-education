# Firebase Configuration Guide for Infinity Education

## Overview
This guide provides step-by-step instructions to configure Firebase for the Infinity Education project. The application uses Firebase Authentication, Firestore Database, Storage, and Functions.

## Prerequisites
- Node.js and npm installed
- Firebase CLI installed (`npm install -g firebase-tools`)
- Google account
- Project dependencies installed (`npm install`)

## Step 1: Create Firebase Project

1. Go to the Firebase Console (https://console.firebase.google.com/)
2. Click "Add project" or "Create a project"
3. Enter project name: "infinity-education" (or your preferred name)
4. Choose whether to enable Google Analytics (recommended)
5. If enabled, select or create a Google Analytics account
6. Click "Create project"

## Step 2: Configure Firebase Authentication

1. In the Firebase Console, select your project
2. Navigate to "Authentication" in the left sidebar
3. Click "Get started"
4. Go to the "Sign-in method" tab
5. Enable the following sign-in providers:
   - Email/Password (click to enable)
   - Google (optional, but recommended)
6. If enabling Google sign-in:
   - Click on Google provider
   - Toggle "Enable"
   - Add your project's domain to authorized domains
   - Save

## Step 3: Configure Firestore Database

1. In Firebase Console, go to "Firestore Database"
2. Click "Create database"
3. Choose "Start in test mode" initially (we'll update rules later)
4. Select a location for your database (choose closest to your users)
5. Click "Done"

### Set up Firestore Security Rules

1. In Firestore Database, go to "Rules" tab
2. Replace the default rules with the contents from `firestore.rules` file
3. The rules include:
   - User authentication required
   - Role-based access control (ADMIN, TEACHER)
   - Data isolation by teacher/class
   - Secure anecdotal records access

## Step 4: Configure Firebase Storage

1. In Firebase Console, go to "Storage"
2. Click "Get started"
3. Review security rules (start in test mode)
4. Choose storage location (same as Firestore)
5. Click "Done"

## Step 5: Configure Firebase Functions

1. In Firebase Console, go to "Functions"
2. Click "Get started"
3. Note: Functions will be deployed later with the CLI

## Step 6: Get Firebase Configuration

1. In Firebase Console, go to "Project settings" (gear icon)
2. Scroll to "Your apps" section
3. Click "Add app" > Web app icon (</>)
4. Register app with nickname: "infinity-education-web"
5. Copy the Firebase configuration object

## Step 7: Configure Environment Variables

1. In your project root, create a `.env` file (copy from `.env.example`)
2. Fill in the Firebase configuration values:

```
REACT_APP_FIREBASE_API_KEY=your_api_key_here
REACT_APP_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
REACT_APP_FIREBASE_PROJECT_ID=your_project_id
REACT_APP_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
REACT_APP_FIREBASE_APP_ID=your_app_id
```

3. Replace each value with the corresponding value from your Firebase config

## Step 8: Initialize Firebase CLI

1. Open terminal in your project directory
2. Run: `firebase login`
3. Authenticate with your Google account
4. Run: `firebase init`
5. Select the following features:
   - Firestore: Configure security rules and indexes
   - Functions: Configure a Cloud Functions directory
   - Storage: Configure security rules for Storage
6. Select "Use an existing project"
7. Choose your Firebase project
8. Configure each service:
   - Firestore: Use existing `firestore.rules` file
   - Functions: Choose Python, use existing `functions` directory
   - Storage: Accept default rules file

## Step 9: Set up Firebase Functions

1. Navigate to the functions directory: `cd functions`
2. Install Python dependencies: `pip install -r requirements.txt`
3. Set up environment variables for Functions:
   ```
   firebase functions:config:set openai.api_key="your_openai_api_key"
   ```
4. Deploy functions: `firebase deploy --only functions`

## Step 10: Deploy Firestore Rules

1. From project root, run: `firebase deploy --only firestore:rules`
2. Verify rules are active in Firebase Console

## Step 11: Test the Configuration

1. Start the development server: `npm run dev`
2. Open browser to localhost (usually http://localhost:5173)
3. Test user registration/login
4. Verify database connectivity by creating test data

## Step 12: Production Deployment

1. Build the project: `npm run build`
2. Deploy to Firebase Hosting: `firebase deploy --only hosting`
3. Your app will be available at: `https://your-project-id.web.app`

## Security Considerations

1. **Environment Variables**: Never commit `.env` files to version control
2. **Firestore Rules**: Review and test security rules thoroughly
3. **API Keys**: Restrict API keys to specific domains in production
4. **Authentication**: Implement proper user role verification
5. **Functions**: Secure Cloud Functions with proper authentication

## Database Structure

The application uses the following Firestore collections:

- `users`: User profiles with roles (ADMIN, TEACHER)
- `classes`: Class information linked to teachers
- `students`: Student records linked to classes
- `anecdotal_records`: Learning observations and assessments

## Common Issues and Solutions

1. **CORS Errors**: Ensure your domain is added to Firebase authorized domains
2. **Permission Denied**: Check Firestore security rules and user authentication
3. **Functions Not Working**: Verify OpenAI API key is set in Functions config
4. **Build Failures**: Check all environment variables are properly set

## Additional Resources

- Firebase Documentation: https://firebase.google.com/docs
- Firestore Security Rules: https://firebase.google.com/docs/firestore/security/get-started
- Firebase Functions: https://firebase.google.com/docs/functions
- React Firebase Guide: https://firebase.google.com/docs/web/setup

## Support

If you encounter issues:
1. Check the Firebase Console for error messages
2. Review browser console for client-side errors
3. Check Functions logs in Firebase Console
4. Verify all environment variables are correctly set

---

This configuration will provide a fully functional Firebase backend for the Infinity Education application with authentication, database, storage, and cloud functions capabilities.